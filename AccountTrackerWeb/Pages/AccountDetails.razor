@page "/accountdetails/{accountid}"

@inject IAccountContainer AllAccounts
@inject NavigationManager NavigationManager

<PageTitle>@GetAccount()?.AccountName | Details</PageTitle>

<h1>ACCOUNT DETAILS: @GetAccount()?.AccountName.ToUpper()</h1>

<p>Account: @GetAccount()?.AccountName</p>
<p>Accountholder: @GetAccount()?.AccountHolderName</p>
<p>Current total: £@GetAccount()?.CurrentValue</p>

<div>
	<button @onclick=ToggleExternalTransferIn>Add money</button>
</div>

@if (_showExternalTransferIn)
{
	<ExternalTransactionIn Account="GetAccount()" DoOnSubmit="ToggleExternalTransferIn" />
}

<table>
	@foreach (var transaction in GetTransactions().Reverse())
	{
		<tr>
			<td>@transaction.SourceAccount.AccountHolderName</td>
			<td>@transaction.TargetAccount.AccountName</td>
			<td>£@transaction.Amount</td>
		</tr>
	}
</table>

<div>
	<button @onclick=@(() => NavigationManager.NavigateTo("/summary"))>
		Go back to Account Summary
	</button>
</div>

@code {
	private bool _showExternalTransferIn = false;

	[Parameter]
	public string? AccountId { get; set; }

	private Account? GetAccount()
	{
		return AllAccounts.Accounts.FirstOrDefault(a => a.AccountId.ToString() == AccountId);
	}

	private IEnumerable<Transaction> GetTransactions()
	{
		return Transaction.Ledger.Values
			.Where(t => t.TargetAccount.AccountId == GetAccount()?.AccountId);
	}

	private void ToggleExternalTransferIn() => _showExternalTransferIn = !_showExternalTransferIn;
}
