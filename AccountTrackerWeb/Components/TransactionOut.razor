@inherits AccountComponentBase
@inject IAccountTracker AccountTracker

<div class="component">
	<p>Please enter some details for your transaction:</p>

	<div>
		<label for="targetAccount">To account:</label>
		<InputSelect id="targetAccount" TValue="Guid" @bind-Value=_targetAccountId>
			@foreach (var account in GetAllOtherAccounts())
			{
				<option value="@account.AccountId">@account.AccountName</option>
			}
			<option value="@ExternalAccount.AccountId">Pay external</option>
		</InputSelect>
	</div>

	<div>
		<label for="amount">Amount (GBP£):</label>
		<InputText id="amount" @bind-Value="_amount" />
	</div>

	<button @onclick=Submit>Submit</button>
</div>

@code {
	private Guid _targetAccountId;
	private Account? _externalAccount;
	private string? _amount;

	[Parameter]
	public EventCallback DoOnSubmit { get; set; }

	protected Account ExternalAccount
	{
		get
		{
			if (_externalAccount == null)
				_externalAccount = AccountTracker.CreateDummyAccount();

			return _externalAccount;
		}
	}

	private List<Account> GetAllOtherAccounts()
	{
		return AccountTracker.GetAccounts()
			.Where(a => a.AccountId != GetAccount().AccountId)
			.ToList();
	}

	private Account? GetAccount(Guid accountId)
	{
		if (accountId == ExternalAccount.AccountId)
			return ExternalAccount;
		else
			return GetAllOtherAccounts().FirstOrDefault(a => a.AccountId == accountId);
	}

	private async void Submit()
	{
		Account? targetAccount = GetAccount(_targetAccountId);

		if (decimal.TryParse(_amount, out decimal parsedAmount)
			&& parsedAmount > 0m
			&& targetAccount != null)
			AccountTracker.CreateTransaction(GetAccount(), targetAccount, parsedAmount);

		await DoOnSubmit.InvokeAsync();
	}

}
