@inherits AccountComponentBase
@inject IAccountTracker AccountTracker

<div class="component">
	<p>Please enter some details for your transaction:</p>

	<div>
		<label for="targetAccount">To account:</label>
		<InputSelect id="targetAccount" @bind-Value=@_optionKey>
			@foreach (var option in _optionsAccountDDL!)
			{
				<option value="@option.Key">@option.Value</option>
			}
		</InputSelect>
	</div>

	<div>
		<label for="amount">Amount (GBP£):</label>
		<InputText id="amount" @bind-Value="_amount" />
	</div>

	<button @onclick=Submit>Submit</button>
</div>

@code {
	private const string PAY_EXTERNAL_OPTION_KEY = "--";
	private string? _optionKey;
	private string? _amount;
	private Dictionary<string, string>? _optionsAccountDDL;

	[Parameter]
	public EventCallback DoOnSubmit { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();
		PopulateAccountDDL();
	}

	private List<Account> GetAllOtherAccounts()
	{
		return AccountTracker.GetAccounts()
			.Where(a => a.AccountId != GetAccount().AccountId)
			.ToList();
	}

	private void PopulateAccountDDL()
	{
		_optionsAccountDDL = GetAllOtherAccounts()
			.Select(a => (a.AccountId.ToString(), a.AccountName))
			.ToDictionary();

		_optionsAccountDDL.Add(PAY_EXTERNAL_OPTION_KEY, "Pay external");

		_optionKey = _optionsAccountDDL.Keys.First();
	}

	private async void Submit()
	{
		if (decimal.TryParse(_amount, out decimal parsedAmount)
			&& parsedAmount > 0m
			&& _optionKey != null)
		{
			if (_optionKey == PAY_EXTERNAL_OPTION_KEY)
				AccountTracker.TransferOutExternal(GetAccount(), parsedAmount);
			else
			{
				Account? target = GetAllOtherAccounts()
					.FirstOrDefault(a => a.AccountId.ToString() == _optionKey);

				if (target != null)
					AccountTracker.Transfer(GetAccount(), target, parsedAmount);
			}
		}

		await DoOnSubmit.InvokeAsync();
	}

}
